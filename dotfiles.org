#+TITLE: Dotfiles
#+AUTHOR: Colin McLear
#+DATE: April 30, 2017
#+TODO: TODO DISABLED CHECK | DONE 
#+PROPERTY: header-args:conf  :comments link :tangle-mode (identity #o444)

This file contains the source to all my dotfiles, which is then generated into
distinct files in my home directory via org-babel. Inspiration for this setup
comes primarily from [[https://expoundite.net/dotfile-management][this discussion]] along with some help from [[https://writequit.org/org/#6017d330-9337-4d97-82f2-2e605b7a262a][writequit]]. 

* MacOS Bootstrap
:PROPERTIES:
:header-args: :tangle ~/dotfiles/bootstrap.sh
:END:
A shell script to bootstrap a new mac (or clean reinstall) up to working order. Download and run the bootstrap file

** Download
#+BEGIN_SRC conf :tangle no
curl -O https://raw.githubusercontent.com/mclear-tools/dotfiles/master/bootstrap.sh && source bootstrap.sh
#+END_SRC
** Brewfile
Install homebrew and use it to install most of what we need. 
#+BEGIN_SRC conf
  #!/usr/bin/env bash 

  # Ask for the administrator password upfront.
  sudo -v


  # Keep-alive: update existing `sudo` time stamp until the script has finished.
  while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

  # Install xcode command line tools
  xcode-select --install

  # Check for Homebrew,
  # Install if we don't have it
  if test ! $(which brew); then
    echo "Installing homebrew..."
    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  fi

  # Update homebrew recipes
  brew update

  # Upgrade any already-installed formulae.
  brew upgrade --all

  # Install GNU core utilities (those that come with OS X are outdated)
  brew install coreutils

  # Install GNU `find`, `locate`, `updatedb`, and `xargs`, g-prefixed
  brew install findutils

  # Install current bash
  brew install bash

  # Install more recent versions of some OS X tools
  brew tap homebrew/dupes
  brew install homebrew/dupes/grep

  binaries=(
    ansiweather
    ack
    aspell --with-all-langs
    cmus --with-ffmpeg
    cmatrix
    cowsay
    dark-mode
    elinks
    ffmpeg
    flac
    fzf
    git
    graphicsmagick
    latex2html
    liquidprompt
    neofetch
    pandoc
    pandoc-citeproc
    par
    pdf2htmlex
    python
    ranger
    reattach-to-user-namespace
    rename
    ruby
    shpotify
    the_silver_searcher
    thefuck
    tree
    tmux
    trash
    wget
    xvid
    zsh
    phantomjs
    webkit2png
    mas
    rg
    zplug
    )

  echo "installing binaries..."
  brew install ${binaries[@]}

  # Install Brew Cask for Mac Apps

  brew tap caskroom/cask
  brew tap caskroom/versions

  # Apps
  apps=(
    alfred
    arq
    bartender
    caffeine
    cloudytabs
    superduper
    cleanmymac
    deluge
    devonthink-pro-office
    djview
    dropbox
    fantastical
    firefox
    forklift
    fluid
    google-chrome
    hammerspoon
    handbrake
    hazel
    istat-menus
    iterm2
    karabiner-elements
    mactex
    mailmate
    marked
    pdf-expert
    spotify
    pdfsam-basic
    plex-media-player
    qlcolorcode 
    qlstephen 
    qlmarkdown 
    quicklook-json 
    qlimagesize 
    quicklookase 
    qlvideo
    rocket
    skim
    skype
    soulver
    suspicious-package
    vlc
    webpquicklook 
    1password
    xquartz
    zotero
    )

  # Install apps to /Applications
  # Default is: /Users/$user/Applications
  echo "installing apps..."
  # brew cask install --appdir="/Applications" ${apps[@]}
  brew cask install ${apps[@]}

  # Link alfred apps
  # brew cask alfred link

  # install font set up
  brew tap caskroom/fonts

  # fonts
  fonts=(
    font-inconsolata
    font-inconsolata-for-powerline
    font-inconsolata-lgc
    font-fira-mono-for-powerline
    # font-meslo-lg-for-powerline
    font-ubuntu-mono-powerline
    font-hasklig
  )

  # install fonts
  echo "installing fonts..."
  brew cask install ${fonts[@]}

  # Install emacs
  brew tap d12frosted/emacs-plus
  brew install emacs-plus --without-spacemacs-icon 

  # Install wine
  brew install wine

  # Change path so Homebrew packages get priority
  $PATH=$(brew --prefix coreutils)/libexec/gnubin:$PATH

  # Change shell to zsh
  sudo dscl . -create /Users/$USER UserShell /usr/local/bin/zsh

#+END_SRC
* MacOS Config
:PROPERTIES:
:header-args: :tangle ~/dotfiles/macos-settings.sh
:END:
#+BEGIN_SRC conf

  # OSX for Hackers (Mavericks/Yosemite)
  #
  # Source: https://gist.github.com/brandonb927/3195465

  #!/bin/sh

  # Some things taken from here
  # https://github.com/mathiasbynens/dotfiles/blob/master/.osx

  # Ask for the administrator password upfront
  sudo -v

  echo "This script will make your Mac awesome"

  ###############################################################################
  # General UI/UX
  ###############################################################################

  # echo ""
  # echo "Hide the Time Machine, Volume, User, and Bluetooth icons"
  # for domain in ~/Library/Preferences/ByHost/com.apple.systemuiserver.*; do
  #   defaults write "${domain}" dontAutoLoad -array \
  #     "/System/Library/CoreServices/Menu Extras/TimeMachine.menu" \
  #     "/System/Library/CoreServices/Menu Extras/Volume.menu" \
  #     "/System/Library/CoreServices/Menu Extras/User.menu"
  # done
  # defaults write com.apple.systemuiserver menuExtras -array \
  #   "/System/Library/CoreServices/Menu Extras/Bluetooth.menu" \
  #   "/System/Library/CoreServices/Menu Extras/AirPort.menu" \
  #   "/System/Library/CoreServices/Menu Extras/Battery.menu" \
  #   "/System/Library/CoreServices/Menu Extras/Clock.menu"

  # sudo chmod 600 /System/Library/CoreServices/Search.bundle/Contents/MacOS/Search

  echo ""
  echo "Disabling OS X Gate Keeper"
  echo "(You'll be able to install any app you want from here on, not just Mac App Store apps)"
  sudo spctl --master-disable
  sudo defaults write /var/db/SystemPolicy-prefs.plist enabled -string no
  defaults write com.apple.LaunchServices LSQuarantine -bool false

  echo ""
  echo "Increasing the window resize speed for Cocoa applications"
  defaults write NSGlobalDomain NSWindowResizeTime -float 0.001

  echo ""
  echo "Expanding the save panel by default"
  defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true
  defaults write NSGlobalDomain PMPrintingExpandedStateForPrint -bool true
  defaults write NSGlobalDomain PMPrintingExpandedStateForPrint2 -bool true

  echo ""
  echo "Automatically quit printer app once the print jobs complete"
  defaults write com.apple.print.PrintingPrefs "Quit When Finished" -bool true

  # Try e.g. `cd /tmp; unidecode "\x{0000}" > cc.txt; open -e cc.txt`
  # echo ""
  # echo "Displaying ASCII control characters using caret notation in standard text views"
  # defaults write NSGlobalDomain NSTextShowsControlCharacters -bool true

  # echo ""
  # echo "Disabling system-wide resume"
  # defaults write NSGlobalDomain NSQuitAlwaysKeepsWindows -bool false

  # echo ""
  # echo "Disabling automatic termination of inactive apps"
  # defaults write NSGlobalDomain NSDisableAutomaticTermination -bool true

  echo ""
  echo "Saving to disk (not to iCloud) by default"
  defaults write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool false

  echo ""
  echo "Reveal IP address, hostname, OS version, etc. when clicking the clock in the login window"
  sudo defaults write /Library/Preferences/com.apple.loginwindow AdminHostInfo HostName

  # echo ""
  # echo "Never go into computer sleep mode"
  # systemsetup -setcomputersleep Off > /dev/null

  echo ""
  echo "Check for software updates daily, not just once per week"
  defaults write com.apple.SoftwareUpdate ScheduleFrequency -int 1

  echo ""
  echo "Disable smart quotes and smart dashes as theyÃ¢â‚¬â„¢re annoying when typing code"
  defaults write NSGlobalDomain NSAutomaticQuoteSubstitutionEnabled -bool false
  defaults write NSGlobalDomain NSAutomaticDashSubstitutionEnabled -bool false


  ###############################################################################
  # Trackpad, mouse, keyboard, Bluetooth accessories, and input
  ###############################################################################

  echo ""
  echo "Increasing sound quality for Bluetooth headphones/headsets"
  defaults write com.apple.BluetoothAudioAgent "Apple Bitpool Min (editable)" -int 40

  echo ""
  echo "Enabling full keyboard access for all controls (e.g. enable Tab in modal dialogs)"
  defaults write NSGlobalDomain AppleKeyboardUIMode -int 3

  echo ""
  echo "Disabling press-and-hold for keys in favor of a key repeat"
  defaults write NSGlobalDomain ApplePressAndHoldEnabled -bool false

  echo ""
  echo "Setting a blazingly fast keyboard repeat rate (ain't nobody got time fo special chars while coding!)"
  defaults write NSGlobalDomain KeyRepeat -int 0

  # echo ""
  # echo "Disabling auto-correct"
  # defaults write NSGlobalDomain NSAutomaticSpellingCorrectionEnabled -bool false

  echo ""
  echo "Setting trackpad & mouse speed to a reasonable number"
  defaults write -g com.apple.trackpad.scaling 2
  defaults write -g com.apple.mouse.scaling 2.5

  echo ""
  echo " Trackpad: enable tap to click for this user and for the login screen"
  defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true
  defaults -currentHost write NSGlobalDomain com.apple.mouse.tapBehavior -int 1
  defaults write NSGlobalDomain com.apple.mouse.tapBehavior -int 1

  echo ""
  echo " Automatically illuminate built-in MacBook keyboard in low light"
  defaults write com.apple.BezelServices kDim -bool true

  echo ""
  echo "Turn off keyboard illumination when computer is not used for 5 minutes"
  defaults write com.apple.BezelServices kDimTime -int 300

  ###############################################################################
  # Screen
  ###############################################################################

  # echo ""
  # echo "Requiring password immediately after sleep or screen saver begins"
  # defaults write com.apple.screensaver askForPassword -int 1
  # defaults write com.apple.screensaver askForPasswordDelay -int 0

  # echo ""
  # echo "Enabling subpixel font rendering on non-Apple LCDs"
  # defaults write NSGlobalDomain AppleFontSmoothing -int 2

  # echo ""
  # echo "Enable HiDPI display modes (requires restart)"
  # sudo defaults write /Library/Preferences/com.apple.windowserver DisplayResolutionEnabled -bool true

  ###############################################################################
  # Finder
  ###############################################################################

  echo ""
  echo "Showing icons for hard drives, servers, and removable media on the desktop"
  defaults write com.apple.finder ShowExternalHardDrivesOnDesktop -bool true

  echo ""
  echo "Showing all filename extensions in Finder by default"
  defaults write NSGlobalDomain AppleShowAllExtensions -bool true

  echo ""
  echo "Showing status bar in Finder by default"
  defaults write com.apple.finder ShowStatusBar -bool true

  echo ""
  echo "Allowing text selection in Quick Look/Preview in Finder by default"
  defaults write com.apple.finder QLEnableTextSelection -bool true

  echo ""
  echo "Displaying full POSIX path as Finder window title"
  defaults write com.apple.finder _FXShowPosixPathInTitle -bool true

  echo ""
  echo "Disabling the warning when changing a file extension"
  defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false

  echo ""
  echo "Use column view in all Finder windows by default"
  defaults write com.apple.finder FXPreferredViewStyle Clmv

  echo ""
  echo "Avoiding the creation of .DS_Store files on network volumes"
  defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true

  echo ""
  echo " Empty Trash securely by default"
  defaults write com.apple.finder EmptyTrashSecurely -bool true

  echo ""
  echo " Hot corners"
  # Possible values:
  #  0: no-op
  #  2: Mission Control
  #  3: Show application windows
  #  4: Desktop
  #  5: Start screen saver
  #  6: Disable screen saver
  #  7: Dashboard
  # 10: Put display to sleep
  # 11: Launchpad
  echo "Top left screen corner → Screen Saver"
  defaults write com.apple.dock wvous-tl-corner -int 5
  defaults write com.apple.dock wvous-tl-modifier -int 0
  echo "Top right screen corner → Desktop"
  defaults write com.apple.dock wvous-tr-corner -int 4
  defaults write com.apple.dock wvous-tr-modifier -int 0
  echo " Bottom right screen corner → Sleep display"
  defaults write com.apple.dock wvous-br-corner -int 10
  defaults write com.apple.dock wvous-br-modifier -int 0
  echo " Bottom left screen corner → Show app windows"
  defaults write com.apple.dock wvous-br-corner -int 3
  defaults write com.apple.dock wvous-br-modifier -int 0

  # echo ""
  # echo "Disabling disk image verification"
  # defaults write com.apple.frameworks.diskimages skip-verify -bool true
  # defaults write com.apple.frameworks.diskimages skip-verify-locked -bool true
  # defaults write com.apple.frameworks.diskimages skip-verify-remote -bool true

  echo ""
  echo "Enabling snap-to-grid for icons on the desktop and in other icon views"
  /usr/libexec/PlistBuddy -c "Set :DesktopViewSettings:IconViewSettings:arrangeBy grid" ~/Library/Preferences/com.apple.finder.plist
  /usr/libexec/PlistBuddy -c "Set :FK_StandardViewSettings:IconViewSettings:arrangeBy grid" ~/Library/Preferences/com.apple.finder.plist
  /usr/libexec/PlistBuddy -c "Set :StandardViewSettings:IconViewSettings:arrangeBy grid" ~/Library/Preferences/com.apple.finder.plist


  ###############################################################################
  # Dock & Mission Control
  ###############################################################################

  # Wipe all (default) app icons from the Dock
  # This is only really useful when setting up a new Mac, or if you donÃ¢â‚¬â„¢t use
  # the Dock to launch apps.
  #defaults write com.apple.dock persistent-apps -array

  echo ""
  echo "Setting the icon size of Dock items to 36 pixels for optimal size/screen-realestate"
  defaults write com.apple.dock tilesize -int 36

  echo ""
  echo "Speeding up Mission Control animations and grouping windows by application"
  defaults write com.apple.dock expose-animation-duration -float 0.1
  defaults write com.apple.dock "expose-group-by-app" -bool true

  echo ""
  echo "Setting Dock to auto-hide and removing the auto-hiding delay"
  defaults write com.apple.dock autohide -bool true
  defaults write com.apple.dock autohide-delay -float 0
  defaults write com.apple.dock autohide-time-modifier -float 0


  ###############################################################################
  # Safari & WebKit
  ###############################################################################

  echo ""
  echo "Hiding SafariÃ¢â‚¬â„¢s bookmarks bar by default"
  defaults write com.apple.Safari ShowFavoritesBar -bool false

  echo ""
  echo "Hiding SafariÃ¢â‚¬â„¢s sidebar in Top Sites"
  defaults write com.apple.Safari ShowSidebarInTopSites -bool false

  echo ""
  echo "Disabling SafariÃ¢â‚¬â„¢s thumbnail cache for History and Top Sites"
  defaults write com.apple.Safari DebugSnapshotsUpdatePolicy -int 2

  echo ""
  echo "Enabling SafariÃ¢â‚¬â„¢s debug menu"
  defaults write com.apple.Safari IncludeInternalDebugMenu -bool true

  echo ""
  echo "Making SafariÃ¢â‚¬â„¢s search banners default to Contains instead of Starts With"
  defaults write com.apple.Safari FindOnPageMatchesWordStartsOnly -bool false

  echo ""
  echo "Removing useless icons from SafariÃ¢â‚¬â„¢s bookmarks bar"
  defaults write com.apple.Safari ProxiesInBookmarksBar "()"

  echo ""
  echo "Allow hitting the Backspace key to go to the previous page in history"
  defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2BackspaceKeyNavigationEnabled -bool true

  echo ""
  echo "Enabling the Develop menu and the Web Inspector in Safari"
  defaults write com.apple.Safari IncludeDevelopMenu -bool true
  defaults write com.apple.Safari WebKitDeveloperExtrasEnabledPreferenceKey -bool true
  defaults write com.apple.Safari "com.apple.Safari.ContentPageGroupIdentifier.WebKit2DeveloperExtrasEnabled" -bool true

  echo ""
  echo "Adding a context menu item for showing the Web Inspector in web views"
  defaults write NSGlobalDomain WebKitDeveloperExtras -bool true


  ###############################################################################
  # Mail
  ###############################################################################

  echo ""
  echo "Setting email addresses to copy as 'foo@example.com' instead of 'Foo Bar <foo@example.com>' in Mail.app"
  defaults write com.apple.mail AddressesIncludeNameOnPasteboard -bool false


  ###############################################################################
  # Terminal
  ###############################################################################

  echo ""
  echo "Enabling UTF-8 ONLY in Terminal.app and setting the Pro theme by default"
  defaults write com.apple.terminal StringEncodings -array 4
  defaults write com.apple.Terminal "Default Window Settings" -string "Pro"
  defaults write com.apple.Terminal "Startup Window Settings" -string "Pro"


  ###############################################################################
  # Time Machine
  ###############################################################################

  echo ""
  echo "Preventing Time Machine from prompting to use new hard drives as backup volume"
  defaults write com.apple.TimeMachine DoNotOfferNewDisksForBackup -bool true

  echo ""
  echo "Disabling local Time Machine backups"
  hash tmutil &> /dev/null && sudo tmutil disablelocal


  ###############################################################################
  # Messages                                                                    #
  ###############################################################################

  echo ""
  echo "Disable automatic emoji substitution (i.e. use plain text smileys)"
  defaults write com.apple.messageshelper.MessageController SOInputLineSettings -dict-add "automaticEmojiSubstitutionEnablediMessage" -bool false

  # echo ""
  # echo "Disable smart quotes as itÃ¢â‚¬â„¢s annoying for messages that contain code"
  # defaults write com.apple.messageshelper.MessageController SOInputLineSettings -dict-add "automaticQuoteSubstitutionEnabled" -bool false

  # echo ""
  # echo "Disable continuous spell checking"
  # defaults write com.apple.messageshelper.MessageController SOInputLineSettings -dict-add "continuousSpellCheckingEnabled" -bool false

  ###############################################################################
  # Personal Additions
  ###############################################################################

  # echo ""
  # echo "Disable hibernation (speeds up entering sleep mode)"
  # sudo pmset -a hibernatemode 0

  # echo ""
  # echo "Remove the sleep image file to save disk space"
  # sudo rm /Private/var/vm/sleepimage
  # echo "Creating a zero-byte file insteadÃ¢â‚¬Â¦"
  # sudo touch /Private/var/vm/sleepimage
  # echo "Ã¢â‚¬Â¦and make sure it canÃ¢â‚¬â„¢t be rewritten"
  # sudo chflags uchg /Private/var/vm/sleepimage

  # echo ""
  # echo "Disable the sudden motion sensor as itÃ¢â‚¬â„¢s not useful for SSDs"
  # sudo pmset -a sms 0

  echo ""
  echo "Speeding up wake from sleep to 24 hours from an hour"
  # http://www.cultofmac.com/221392/quick-hack-speeds-up-retina-macbooks-wake-from-sleep-os-x-tips/
  sudo pmset -a standbydelay 86400

  # echo ""
  # echo "Disable computer sleep and stop the display from shutting off"
  # sudo pmset -a sleep 0
  # sudo pmset -a displaysleep 0

  # echo ""
  # echo "Disable annoying backswipe in Chrome"
  # defaults write com.google.Chrome AppleEnableSwipeNavigateWithScrolls -bool false

  echo ""
  echo "Always boot in verbose mode"
  sudo nvram boot-args="-v"

  ###############################################################################
  # Kill affected applications
  ###############################################################################

  echo "Done!"

#+END_SRC
* SpaceVim
:PROPERTIES:
:header-args: :tangle ~/.vimrc
:END:
Here is a config that mimics [[http://spacemacs.org/][spacemacs]] in a nice lightweight manner, but for
vim. It's [[https://github.com/ctjhoa/spacevim][spacevim]]! 

** Bootstrap
Download the config and a bootstrap =vimrc= with
#+BEGIN_SRC sh :tangle no
curl -sSfL https://raw.githubusercontent.com/ctjhoa/spacevim/master/vimrc.sample -o ~/.vimrc && vim
#+END_SRC

** Base Config
Here's the base config file

#+BEGIN_SRC vimrc 
" -*- mode: vimrc -*-
"vim: ft=vim

" dotspacevim/auto-install {{{
" Automatic installation of spacevim.

if empty(glob('~/.vim/autoload/spacevim.vim'))
    silent !curl -sSfLo ~/.vim/autoload/spacevim.vim --create-dirs
          \ https://raw.githubusercontent.com/ctjhoa/spacevim/master/autoload/spacevim.vim
endif

" }}}

" dotspacevim/init {{{
" This code is called at the very startup of Spacevim initialization
" before layers configuration.
" You should not put any user code in there besides modifying the variable
" values."
" IMPORTANT: For the moment, any changes in plugins or layers needs
" a vim restart and :PlugInstall

  let g:dotspacevim_distribution_mode = 1

  let g:dotspacevim_configuration_layers = [
  \  'core/.*',
  \  'git',
  \  'syntax-checking'
  \]

  let g:dotspacevim_additional_plugins = [
  \  'morhetz/gruvbox',
  \  'bling/vim-airline', 
  \  'vim-airline/vim-airline-themes',
  \  'mkitt/tabline.vim',
  \  'git://github.com/sjl/gundo.vim', 
  \  'vim-pandoc/vim-pandoc-syntax',                                           
  \  'vim-pandoc/vim-pandoc',
  \  'vim-pandoc/vim-pandoc-after',
  \  'jceb/vim-orgmode',
  \  'VOoM',
  \  'gitv',
  \  'henrik/vim-open-url',
  \  'altercation/vim-colors-solarized',
  \]
  " You can also pass vim plug options like this: [{ 'name': 'Valloric/YouCompleteMe', 'option': {'do': './install.py'}}] 

  let g:dotspacevim_excluded_plugins = []

  let g:dotspacevim_escape_key_sequence = 'fd'

" }}}

" dotspacevim/user-init {{{
" Initialization for user code.
" It is compute immediately after `dotspacemacs/init', before layer
" configuration executes.
" This function is mostly useful for variables that need to be set
" before plugins are loaded. If you are unsure, you should try in setting
" them in `dotspacevim/user-config' first."

  let mapleader = ' '
  let g:leaderGuide_vertical = 1

" }}}

call spacevim#bootstrap()

" dotspacevim/user-config {{{
" Configuration for user code.
" This is computed at the very end of Spacevim initialization after
" layers configuration.
" This is the place where most of your configurations should be done.
" Unless it is explicitly specified that
" a variable should be set before a plugin is loaded,
" you should place your code here."

" Solarized stuff
let g:solarized_termtrans = 1
set background=dark
colorscheme solarized

" }}}

#+END_SRC
** Keymappings
#+BEGIN_SRC vimrc
" Grep TODO and NOTE
noremap <leader>d :copen<CR>:vimgrep /TODO/gj *.md *.taskpaper<CR>
noremap <leader>n :copen<CR>:vimgrep /NOTE/gj *.md *.taskpaper<CR>
" clean up paragraph according to pandoc specs
nnoremap <leader>= vip=
" previous and next buffer 
nnoremap <leader>[ :bp<CR>
nnoremap <leader>] :bn<CR>
" previous and next tab
nnoremap <leader>' :tabnext<CR>
nnoremap <leader>; :tabprevious<CR>
" remap escape
inoremap fd <Esc>

" make cursor move to next visual line below cursor this is a test 
noremap Q gwip
nnoremap <leader>c :set cursorline! <CR>
nnoremap <C-N><C-N> :set invnumber<CR>
" presents spelling options in dropdown and returns to normal mode
nnoremap <leader>s ea<C-X><C-S>


" set leader and local leader
let maplocalleader = ","
" Toggle table of contents
nnoremap <localLeader>c :TOC<CR>
" Toggle Goyo on/off
nnoremap <localLeader>g :Goyo<CR>
"Map NERDTree to ,t
nnoremap <silent> <localLeader>t :NERDTreeToggle<CR>
nnoremap <localLeader>v :VoomToggle<CR>
" Gundo toggle
nnoremap <localleader>G :GundoToggle<CR>
"toggle filetype for pandoc
nnoremap <localleader>f :set filetype=pandoc<CR> 
" toggle ranger file navigator
nnoremap <localleader>r :!ranger<CR>
inoremap <localleader>r :!ranger<CR>
" Fuzzyfinder for home directory
noremap <C-t> :FZF ~<CR>
" Fuzzyfinder for current directory
noremap <C-f> :FZF<CR>
" quick save
nnoremap <localleader>w :w!<CR>

"Copy to system clipboard
nmap <F2> :set paste<CR>:r !pbpaste<CR>:set nopaste<CR>
imap <F2> <Esc>:set paste<CR>:r !pbpaste<CR>:set nopaste<CR>
nmap <F1> :.w !pbcopy<CR><CR>
vmap <F1> :w !pbcopy<CR><CR>

" start external shell command with a bang
nnoremap ! :!

" correct common misspellings for commands
cabbrev ew :wq
cabbrev qw :wq 
cabbrev Q :q
cabbrev W :w 
#+END_SRC

** Startify
#+BEGIN_SRC vimrc
  " Startify Settings {{{

      " au! autocmd User Startified setlocal cursorline

      let g:startify_enable_special         = 0
      let g:startify_files_number           = 8
      let g:startify_relative_path          = 0
      let g:startify_change_to_dir          = 1
      let g:startify_session_autoload       = 1
      let g:startify_session_persistence    = 1
      let g:startify_session_delete_buffers = 1

      let g:startify_list_order = [
        \ ['   Most recently used:'],
        \ 'files',
        \ ['   Recently used within this dir:'],
        \ 'dir',
        \ ['   Sessions:'],
        \ 'sessions',
        \ ['   Bookmarks:'],
        \ 'bookmarks',
        \ ]

      let g:startify_skiplist = [
                  \ 'COMMIT_EDITMSG',
                  \ $VIMRUNTIME .'/doc',
                  \ 'bundle/.*/doc',
                  \ '\.vimgolf',
                  \ ]

      let g:startify_bookmarks = [
                  \ '~/.vimrc',
                  \ '~/Dropbox/Work/Teaching',
                  \ '~/Dropbox/Work/Projects',
                  \ ]

      let g:startify_custom_header =
            \ map(split(system('fortune | cowsay'), '\n'), '"   ". v:val') + ['','']

      let g:startify_custom_footer =
            \ ['', "Aus so krummem Holze, als woraus der Mensch gemacht ist, kann nichts ganz Gerades gezimmert werden (8:23)", '']


      hi StartifyBracket ctermfg=240
      hi StartifyFile    ctermfg=147
      hi StartifyFooter  ctermfg=240
      hi StartifyHeader  ctermfg=114
      hi StartifyNumber  ctermfg=215
      hi StartifyPath    ctermfg=245
      hi StartifySlash   ctermfg=240
      hi StartifySpecial ctermfg=240

  " }}}

#+END_SRC
** Settings
#+BEGIN_SRC vimrc
  " Settings {{{
  syntax enable
  " buffer settings
  set hidden
  set switchbuf=usetab
  " cursorline 
  " highlight LineNr ctermfg=yellow ctermbg=black guibg=black guifg=grey
  " hi CursorLineNR cterm=bold
  " augroup CLNRSet
  "       autocmd! ColorScheme * hi CursorLineNR cterm=bold ctermfg=white
  "     augroup END
  " set cursorline
  " hi CursorLine   cterm=NONE ctermbg=darkred ctermfg=white guibg=darkred guifg=white

  " automatically leave insert mode after 'updatetime' milliseconds of inaction
  " au CursorHoldI * stopinsert

  " set vimwiki filetype for path to wiki
  " autocmd! BufRead,BufNewFile /Users/Roambot/Dropbox/Wiki set filetype=vimwiki

  " include spaces in filenames
  set isfname+=32

  set ttyscroll=3
  " change cursor shape depending on mode with different code for tmux configuration
  if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
    else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
  endif

  " split settings
  set splitbelow
  set splitright

  " tab settings
  hi TabLine      ctermfg=Black  ctermbg=Green     cterm=NONE
  hi TabLineFill  ctermfg=Black  ctermbg=Green     cterm=NONE
  hi TabLineSel   ctermfg=White  ctermbg=DarkBlue  cterm=NONE

  set spell spelllang=en_us
  set tabstop=4 shiftwidth=2 expandtab
  set linespace=2
  set scrolloff=999 " keep cursor in middle of screen
  set textwidth=80
  " remap paragraph formatting 
  set formatprg=par
  set ruler
  set laststatus=2
  set noshowmode
  set showcmd
  set wildmenu
  set ttyfast " u got a fast terminal
  set lazyredraw " to avoid scrolling problems
  " Move to next line when using left and right
  set whichwrap+=<,>
  " |nojoinspaces| allows you to use SHIFT-J in normal mode to join the next line 
  " with the current line without adding unwanted spaces.
  setlocal nojoinspaces
  set backspace=indent,eol,start
  " make vim scrollable with mouse
  set mouse=a
  set go+=a


  " The Silver Searcher
  if executable('ag')
    " Use ag over grep
    set grepprg=ag\ --nogroup\ --nocolor
  endif

  " bind K to grep word under cursor
  nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>
  " Ag exec command
  "command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
  nnoremap A :Ag<Space>

#+END_SRC

** Voom Settings
Some settings for the Voom outliner
#+BEGIN_SRC vimrc
" Voom Settings {{{

let g:voom_tree_width = 50
let g:voom_ft_modes = {'pandoc': 'markdown', 'markdown': 'markdown', 'tex': 'latex'}
let g:voom_default_mode = 'pandoc'

" }}}
#+END_SRC

** Airline settings
Settings for the [[https://github.com/vim-airline/vim-airline][airline]] modeline
#+BEGIN_SRC vimrc
" AIRLINE SETTINGS {{{

  let g:airline_powerline_fonts=1 
  let g:airline_theme = 'solarized'
  " let g:airline_left_sep=''
  " let g:airline_right_sep=''
  " let g:airline_right_sep = '◀'
  " let g:airline_left_sep = '▶'
" enable/disable detection of whitespace errors. >
  let g:airline#extensions#whitespace#enabled = 0
" enable/disable tmuxline integration >
  let g:airline#extensions#tmuxline#enabled = 1
" enable/disable bufferline integration >
  let g:airline#extensions#bufferline#enabled = 0
  let g:bufferline_echo = 1
" enable buffers in tabs
  let g:airline#extensions#tabline#enabled = 1
" Tabline separators
  " let g:airline#extensions#tabline#left_sep = '|'
  " let g:airline#extensions#tabline#left_alt_sep = '|'
  " let g:airline#extensions#tabline#left_sep = '▶'
  " let g:airline#extensions#tabline#left_alt_sep = '>'
" display tab number in tab
  let g:airline#extensions#tabline#tab_nr_type = 1 " tab number
" go to tab number with <leader>number
  let g:airline#extensions#tabline#buffer_idx_mode = 1
  nmap <leader>1 <Plug>AirlineSelectTab1
  nmap <leader>2 <Plug>AirlineSelectTab2
  nmap <leader>3 <Plug>AirlineSelectTab3
  nmap <leader>4 <Plug>AirlineSelectTab4
  nmap <leader>5 <Plug>AirlineSelectTab5
  nmap <leader>6 <Plug>AirlineSelectTab6
  nmap <leader>7 <Plug>AirlineSelectTab7
  nmap <leader>8 <Plug>AirlineSelectTab8
  nmap <leader>9 <Plug>AirlineSelectTab9
" display only filename in tabs
let g:airline#extensions#tabline#fnamemod = ':t'

" display time
function! AirlineInit()
"  let g:airline_section_y = airline#section#create(['ffenc', '%{strftime("%H:%M")}'])
   let g:airline_section_y = airline#section#create(['%{strftime("%a  %b %d  %X")}'])
endfunction
autocmd VimEnter * call AirlineInit()
"""""""""""""""""""""""""""""""""""
  " let g:airline_theme = 'base16'
  " let g:airline_theme = 'solarized'
  " let g:airline_theme = 'hybridline'
  " let g:airline_theme = 'bubblegum'

" if has('gui_macvim') 
"   let g:airline_right_sep = '◀'
"   let g:airline_left_sep = '▶'
" else
"  let g:airline_powerline_fonts=1 
" endif 

" " Tweak of solarized colors
" let g:airline_theme_patch_func = 'AirLineBlaenkTheme'
" " 0,1: gfg, gbg; 2,3: tfg, tbg; 4: styles
" function! AirLineBlaenkTheme(palette)
"   if g:airline_theme == 'solarized'
"     let magenta = ['#ffffff', '#d33682', 255, 125, '']
"     let blue = ['#ffffff', '#268bd2', 255, 33, '']
"     let green = ['#ffffff', '#859900', 255, 64, '']
"     let red = ['#ffffff', '#dc322f', 255, 160, '']
"     let orange = ['#ffffff', '#cb4b16', 255, 166, '']
"     let cyan = ['#ffffff', '#2aa198', 255, 37, '']
"     let modes = {
"       \ 'normal': blue,
"       \ 'insert': cyan,
"       \ 'replace': magenta,
"       \ 'visual': orange
"       \}
"     let a:palette.replace = copy(a:palette.insert)
"     let a:palette.replace_modified = a:palette.insert_modified
"     for key in keys(modes)
"       let a:palette[key].airline_a = modes[key]
"       let a:palette[key].airline_z = modes[key]
"     endfor
"   endif
" endfunction


" symbol dictionary
" if !exists('g:airline_symbols')
"   let g:airline_symbols = {}
" endif

" " unicode symbols

"    let g:airline_left_sep = '»'
"    let g:airline_left_sep = '▶'
"    let g:airline_right_sep = '«'
"    let g:airline_right_sep = '◀'
"    let g:airline_symbols.linenr = '␊'
"    let g:airline_symbols.linenr = '␤'
"    let g:airline_symbols.linenr = '¶'
"    let g:airline_symbols.branch = '⎇'
"    let g:airline_symbols.paste = 'ρ'
"    let g:airline_symbols.paste = 'Þ'
"    let g:airline_symbols.paste = '∥'
"    let g:airline_symbols.whitespace = 'Ξ'
"

 " " powerline symbols
 "  let g:airline_left_sep = ''
 "  let g:airline_left_alt_sep = ''
 "  let g:airline_right_sep = ''
 "  let g:airline_right_alt_sep = ''
 "  let g:airline_symbols.branch = ''
 "  let g:airline_symbols.readonly = ''
 "  let g:airline_symbols.linenr = ''




" }}}


#+END_SRC

* Bash
I don't use bash much but there are a couple things that show up in my
bashrc
#+BEGIN_SRC conf :tangle ~/.bashrc
emacs -eval "(woman \"$1\")"
[ -f ~/.fzf.bash ] && source ~/.fzf.bash
#+END_SRC

And setup of Emacs-anywhere
#+BEGIN_SRC conf :tangle ~/.bash_profile 
  # export EA_EDITOR='/usr/local/bin/emacsclient -a "" -c'
  # export EA_WINDOW_TITLE='Emacs Anywhere'
  # export EA_X='300'             
  # export EA_Y='400'
  # export EA_WIDTH='90'
  # export EA_HEIGHT="15"
  # export EA_EDITOR='/usr/local/bin/emacsclient -n -c -e "((name . \"Emacs-Nowhere\") (left . 300) (top . 400) (width . 90) (height . 15))"'

#+END_SRC
* Zsh
:PROPERTIES:
:header-args: :tangle ~/.zshrc
:END:

Zsh is my primary shell. My settings aren't very sophisticated but they work
for me. 

** Basic Settings
#+BEGIN_SRC conf 
  # Set architecture flags
  export ARCHFLAGS="-arch x86_64"

  # Ensure user-installed binaries take precedence
  export PATH=/usr/local/opt/texinfo/bin:/usr/local/opt/coreutils/libexec/gnubin:/usr/local/opt/python/libexec/bin:/usr/local/bin:/usr/local/sbin:$HOME/bin:$HOME/.local/bin:/usr/bin:/usr/sbin:/sbin:/bin:/opt/X11/bin:/Library/TeX/texbin:$HOME/.fzf/bin:$HOME/.cabal/bin:$HOME/.local/bin:$PATH
  export MANPATH="/usr/local/opt/coreutils/libexec/gnuman:$MANPATH"

  #set GOPATH
  export GOROOT=/usr/local/opt/go/libexec
  export GOPATH=$HOME/.go
  export GOBIN=$HOME/bin
  export PATH=$PATH:$GOROOT/bin:$GOPATH/bin:$GOBIN/bin

  # set editor
  # export EDITOR="/usr/local/bin/nvim"
  export VISUAL="/usr/local/bin/emacsclient"
  export EDITOR="$VISUAL"
  export ALTERNATE_EDITOR="vim"
  
  # set shell
  export SHELL=/usr/local/bin/zsh
  # locale
  export LANG=en_US.UTF-8
  export LC_ALL=en_US.UTF-8

  # speed up start time
  skip_global_compinit=1
  # Pyenv
  # eval "$(pyenv init -)"
#+END_SRC

** Beets
#+BEGIN_SRC conf
  # # Path to Beets
  export BEETSDIR=~/Dropbox/Apps/Beets/
#+END_SRC

** Virtualenvs

#+BEGIN_SRC conf
  # virtualenvwrapper config
  source /usr/local/bin/virtualenvwrapper.sh
  export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python
  export PROJECT_HOME=~/Dropbox/Work/projects
  export WORKON_HOME=~/bin/virtualenvs
#+END_SRC

** Plugins
I use [[%5B%5Bhttps://github.com/zplug/zplug%5D%5Bzplug/zplug: A next-generation plugin manager for zsh%5D%5D][zplug]] for all plugins. 

#+BEGIN_SRC conf
  # install zplug if it doensn't exist
  [ ! -d /usr/local/opt/zplug ] && {
        brew install zplug
        source /usr/local/opt/zplug/init.zsh && zplug update --self
  }

  # Basic setttings
  export ZPLUG_HOME=/usr/local/opt/zplug
  source $ZPLUG_HOME/init.zsh 

  # Let zplug manage zplug
  zplug "zplug/zplug", hook-build:"zplug --self-manage"

  #############################################
  #               Plugins
  #############################################

  # OS X ###################################### 
  zplug "plugins/osx",  from:oh-my-zsh,  if:"[[ $OSTYPE == *darwin* ]]"
  # zplug "plugins/brew", from:oh-my-zsh,  if:"[[ $(command -v brew) ]]"

  # General ###################################
  # zplug "plugins/git", from:oh-my-zsh  # git commands
  zplug "zsh-users/zsh-autosuggestions"  # useful autosuggestions
  zplug "zsh-users/zsh-history-substring-search" # like what it says
  zplug "modules/directory", from:prezto  # better directory commands
  zplug "modules/completion", from:prezto # better completion
  # define RPS1 in order to avoid the annoying vim status
  # export RPS1=" "
  # zplug "plugins/vi-mode", from:oh-my-zsh 

  # zsh-syntax-highlighting must be loaded
  # after executing compinit command and sourcing other plugins
  # (If the defer tag is given 2 or above, run after compinit command)
  zplug "zsh-users/zsh-syntax-highlighting", defer:2  # fish syntax highlight

  # Theme #####################################

  # spaceship-prompt
  # https://github.com/denysdovhan/spaceship-prompt
  zplug "denysdovhan/spaceship-prompt", use:spaceship.zsh, from:github, as:theme

  # Liquid prompt https://github.com/nojhan/liquidprompt
  # LP_ENABLE_TIME=1
  # LP_USER_ALWAYS=1
  # zplug 'nojhan/liquidprompt'

  # Installation ###############################
  # Install packages that have not been installed yet
  if ! zplug check --verbose; then
      printf "Install? [y/N]: "
      if read -q; then
          echo; zplug install
      else
          echo
      fi
  fi
  # Then, source plugins and add commands to $PATH
  zplug load # --verbose # uncomment if verbose loading preferred

#+END_SRC

** Spaceship Theme Settings
See https://denysdovhan.com/spaceship-prompt/docs/Options.html#options for explanation
#+BEGIN_SRC conf
  SPACESHIP_HOST_SHOW='always'
  SPACESHIP_USER_SHOW='needed'
  SPACESHIP_TIME_SHOW=true
  SPACESHIP_TIME_FORMAT="%*"
  SPACESHIP_CHAR_SYMBOL='➜' 
  SPACESHIP_CHAR_SUFFIX='  '
  SPACESHIP_VENV_COLOR='grey'
  SPACESHIP_VENV_PREFIX='( '
  SPACESHIP_VENV_SUFFIX=') '
  SPACESHIP_VI_MODE_INSERT='' 
  SPACESHIP_VI_MODE_COLOR='yellow'
  SPACESHIP_PROMPT_ORDER=(
    time          # Time stampts section
    user          # Username section
    host          # Hostname section
    dir           # Current directory section
    git           # Git section (git_branch + git_status)
    hg            # Mercurial section (hg_branch  + hg_status)
    package       # Package version
    node          # Node.js section
    ruby          # Ruby section
    xcode         # Xcode section
    swift         # Swift section
    golang        # Go section
    haskell       # Haskell Stack section
    venv          # virtualenv section
    pyenv         # Pyenv section
    exec_time     # Execution time
    line_sep      # Line break
    battery       # Battery level and status
    vi_mode       # Vi-mode indicator
    jobs          # Backgound jobs indicator
    exit_code     # Exit code section
    char          # Prompt character
  )
#+END_SRC

** Prompt
#+BEGIN_SRC conf
  # LIQUID PROMPT
  # Only load Liquid Prompt in interactive shells, not from a script or from scp
  if [ -f /usr/local/share/liquidprompt ]; then
    . /usr/local/share/liquidprompt
  fi  
#+END_SRC

#+BEGIN_SRC conf :tangle no
   # zsh prompt
   if [ -n "$INSIDE_EMACS" ]; then
       # LIQUID PROMPT
       # Only load Liquid Prompt in interactive shells, not from a script or from scp
       if [ -f /usr/local/share/liquidprompt ]; then
           . /usr/local/share/liquidprompt
       fi  
   else
       promptinit
       prompt garrett
  fi

    # Other prompt themes
      # zgen oh-my-zsh themes/ys  # good standard theme
      # zgen oh-my-zsh themes/xiong-chiamiov-plus # Good two-line theme
#+END_SRC

** Emacs Directory Tracking
From [[https://jackkamm.github.io/blog/directory-tracking-in-emacs-terminal-emulators/][this]] blog post

#+BEGIN_SRC conf 
if [ -n "$INSIDE_EMACS" ]; then
    # function to set the dired and host for ansiterm
    set_eterm_dir() {
        print -P "\033AnSiTu %n"
        print -P "\033AnSiTh" "$(hostname -f)"
        print -P "\033AnSiTc %d"
    }

    # call prmptcmd whenever prompt is redrawn
    precmd_functions=($precmd_functions set_eterm_dir)
fi
#+END_SRC
** Aliases
#+BEGIN_SRC conf
  ### ALIASES ################################

    # General bindings
    alias zu='zgen selfupdate && zgen update'
    alias bu='brew update && brew outdated && brew upgrade && brew cleanup && brew doctor'
    alias bd='brew desc' 
    alias bi='brew info'
    alias bs='brew search'
    alias bc='brew cask' 
    alias bcs='brew cask search'
    alias bci='brew cask install'
    alias ex='exit'
    alias tm='tmux'
    alias ll='ls --color -lAFh -a'
    alias lc="colorls -lA --sd"
    alias ls='ls --color -a'
    alias ld="ls -lht | grep '^d'"
    alias nf='neofetch'

    # List directory on cd
    function chpwd() {
      ls
    }

    # source
    alias so='source'

    # Vim
    alias v='/usr/local/bin/vim'
    # alias vim='emacs'

    ### EMACS #####
    alias ec='/usr/local/bin/emacsclient'
    alias ect='/usr/local/bin/emacsclient -nw'
    alias et='/usr/local/Cellar/emacs-plus/26.1/Emacs.app/Contents/MacOS/Emacs -nw' 
    alias emacs='/usr/local/Cellar/emacs-plus/26.1/Emacs.app/Contents/MacOS/Emacs'
    alias magit='emacsclient -n -e "(progn (magit-status) (delete-other-windows))"'
    
    # alias ec= '/Applications/Emacs.app/Contents/MacOS/bin/emacsclient'
    # alias ect='/Applications/Emacs.app/Contents/MacOS/bin/emacsclient -nw'
    # alias et="/Applications/Emacs.app/Contents/MacOS/emacs -nw"
    # alias emacs='/Applications/Emacs.app/Contents/MacOS/emacs'

    # Alias open file with application
    alias o='open -a'

    # Alias for Plex
    alias pms="/Applications/Plex\ Media\ Server.app/Contents/MacOS/Plex\ Media\ Scanner"

    # Weather
    alias weather='ansiweather'
    alias forecast='ansiweather -f 5'

    # cd to the path of the front Finder window
    cdf() {
    target=`osascript -e 'tell application "Finder" to if (count of Finder windows) > 0 then get POSIX path of (target of front Finder window as text)'`
    if [ "$target" != "" ]; then
    cd "$target"; target=""; pwd
    else
    echo 'No Finder window found' >&2
    fi
    }

    # does the reverse of above
    alias f='open -a Finder ./'

    # Dropbox uploader ("McDrop")
    alias du='~/bin/Dropbox-Uploader/dropbox_uploader.sh'

    # fuzzy completion in zsh
    [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
#+END_SRC
** Colorls
#+BEGIN_SRC conf
source $(dirname $(gem which colorls))/tab_complete.sh
#+END_SRC
** Options
#+BEGIN_SRC conf
  ### OPTIONS ###
  setopt nolistbeep
  setopt histignoredups
  setopt autolist
  set -o promptsubst
  # pip should only run if there is a virtualenv currently activated
  # export PIP_REQUIRE_VIRTUALENV=true
  # cache pip-installed packages to avoid re-downloading
   # export PIP_DOWNLOAD_CACHE=$HOME/.pip/cache

   # syspip () {
   #     PIP_REQUIRE_VIRTUALENV="" pip "$@"
   # }

  # for the fuck
   eval "$(thefuck --alias fuck)"
   
  # Disable marking untracked files
  # under VCS as dirty. This makes repository status check for large repositories
  # much, much faster.
  DISABLE_UNTRACKED_FILES_DIRTY="true"

#+END_SRC
* Git
** Gitconfig
:PROPERTIES:
:header-args: :tangle ~/.gitconfig
:END:

*** User
#+BEGIN_SRC conf 
[user]
	name = Colin McLear
	email = mclear@fastmail.com
#+END_SRC
*** Credential
#+BEGIN_SRC conf
[credential]
	helper = osxkeychain
#+END_SRC
*** Push
#+BEGIN_SRC conf
[push]
	default = simple
#+END_SRC
*** Alias
#+BEGIN_SRC conf 
[alias]
lg1 = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
lg = !"git lg1"
#+END_SRC
*** Templates
#+BEGIN_SRC emacs-lisp
[init]
templatedir = ~/Dropbox/Apps/Git/git-templates/
#+END_SRC
** Gitignore
:PROPERTIES:
:header-args: :tangle ~/.gitignore_global
:END:

*** Compiled Source
#+BEGIN_SRC conf
#TESTcompiled source #
###################
*.com
*.class
*.dll
*.exe
*.o
*.so
#+END_SRC
*** Packages  
#+BEGIN_SRC conf
# Packages #
############
# it's better to unpack these files and commit the raw source
# git has its own built in compression methods
*.7z
*.dmg
*.gz
*.iso
*.jar
*.rar
*.tar
*.zip
#+END_SRC
 
*** Logs & Databases
#+BEGIN_SRC conf
# Logs and databases #
######################
*.log
*.sql
*.sqlite
#+END_SRC
 
*** MacOS
#+BEGIN_SRC conf
# MacOS generated files #
######################
.DS_Store
.AppleDouble
.LSOverride
#+END_SRC

*** Icons
#+BEGIN_SRC conf
# Icon must end with two \r
Icon
#+END_SRC

*** Thumbnails
#+BEGIN_SRC conf
# Thumbnails
._*
#+END_SRC

*** Root Files
#+BEGIN_SRC conf
# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
#+END_SRC

*** Remote Directories
#+BEGIN_SRC conf
# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk
#+END_SRC

* LaTeX
#+BEGIN_SRC conf :tangle ~/.latexmkrc 
$pdflatex = 'xelatex -synctex=1 %O %S';
$pdf_mode = 1;
$postscript_mode = 0;
$dvi_mode = 0;
$pdf_previewer = "open -a /Applications/PDF Expert.app";
$clean_ext = "paux lox pdfsync out";
#+END_SRC
* Tmux
I don't use tmux much anymore but it is great with vim.
#+BEGIN_SRC conf :tangle ~/.tmux.conf
# act like GNU screen
unbind C-b
set -g prefix C-a

# zsh is kinda tight
set-option -g default-shell $SHELL

# Tmux status line settings
source-file ~/.nvim/tmuxline 

# Set a Ctrl-a shortcut for reloading your tmux config
bind r source-file ~/.tmux.conf

 # set window and pane index to 1 (0 by default)
set-option -g base-index 1
setw -g pane-base-index 1

# Bind splits
bind | split-window -h
bind - split-window -v

# improve colors
# set -g default-terminal "screen-256color-italic"

# set mouse selection
set -g mode-mouse on
setw -g mouse-select-window on
setw -g mouse-select-pane on

# Use vim keybindings in copy mode
setw -g mode-keys vi

# cut and paste
set -g default-command "reattach-to-user-namespace -l zsh"

# # Setup 'v' to begin selection as in Vim
bind-key -t vi-copy v begin-selection
bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"

# # Update default binding of `Enter` to also use copy-pipe
unbind -t vi-copy Enter
bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"

# act like vim
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
bind-key -r C-h select-window -t :-
bind-key -r C-l select-window -t :+

# Smart pane switching with awareness of vim splits
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# Use Alt-arrow keys without prefix key to switch panes
bind -n M-Left select-pane -L
bind -n M-Right select-pane -R
bind -n M-Up select-pane -U
bind -n M-Down select-pane -D

# Shift arrow to switch windows
bind -n S-Left  previous-window
bind -n S-Right next-window

# No delay for escape key press
set -sg escape-time 0

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'

# tmux resurrect for vim
set -g @resurrect-strategy-nvim 'session'
set -g @resurrect-save 'S'
set -g @resurrect-restore 'R'

# tmux continuum
set -g @continuum-boot 'on'
set -g @continuum-boot-options 'iterm,fullscreen'

# Other examples:
# github_username/plugin_name    \
# git@github.com/user/plugin     \
# git@bitbucket.com/user/plugin  \

# Initializes TMUX plugin manager.
# Keep this line at the very bottom of tmux.conf.
run '~/.tmux/plugins/tpm/tpm'
#+END_SRC
* Miscellaneous
** Ansiweather
#+BEGIN_SRC conf :tangle ~/.ansiweatherrc
api_key:d0dfeea1f7a83406288ec55700b36f3d 
location:Providence,RI
fetch_cmd:ftp -V -o -
geo_api_url:www.telize.com/geoip
geo_api_proto:http
units:imperial
daylight:true
#+END_SRC
