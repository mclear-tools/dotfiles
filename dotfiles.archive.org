** DISABLED Sourcing
For syntax highlighting in zsh
#+BEGIN_SRC conf :tangle no
  zgen load zsh-users/zsh-syntax-highlighting
  # source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
#+END_SRC


** DISABLED Zgen config 
I used to use [[https://github.com/tarjoilija/zgen][zgen]] for my zsh plugins.

#+BEGIN_SRC conf :tangle no
  #### ZGEN PLUGINS #######

  # load zgen
   source "${HOME}/.zgen/zgen.zsh"

  # Completion path
  # fpath=(~/.zsh/Completion $fpath)

  # check if there's no init script
   if ! zgen saved; then
       echo "Creating a zgen save"

     # prezto and modules
     #  zgen prezto prompt theme 'garrett'

       zgen prezto
       zgen prezto homebrew
       zgen prezto git
       zgen prezto command-not-found
       zgen prezto utility
       zgen prezto directory
       # zgen prezto syntax-highlighting

       zgen load tarruda/zsh-autosuggestions

  # save all to init script
     zgen save
   fi
   ## END ZGEN ################################
#+END_SRC


** DISABLED Vi Mode
#+BEGIN_SRC conf :tangle no
  # Set vi mode
  bindkey -v
  bindkey -M viins 'jk' vi-cmd-mode
  bindkey '^R' history-incremental-search-backward
#+END_SRC


* DISABLED Vim
:PROPERTIES:
:header-args: :tangle no
:END:

I use emacs, but it is nice to have a decently configured vim when
necessary. Right now I have this disabled in favor of spacevim.

** Header Info
#+BEGIN_SRC vimrc 

" vim:fdm=marker
set encoding=utf-8
scriptencoding utf-8
set nocompatible
filetype plugin indent on

#+END_SRC

** Plugins
#+BEGIN_SRC vimrc
" Plugins {{{

call plug#begin('~/.vim/plugged')

Plug 'bling/vim-airline'  " powerline plugin
Plug 'mkitt/tabline.vim'  " configure tabs and works with airline
Plug 'git://github.com/sjl/gundo.vim' " graphical tree undo
" NERD tree will be loaded on the first invocation of NERDTreeToggle command
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' } " file manager
Plug 'jeetsukumaran/vim-buffergator' "Buffer manager
Plug 'wesQ3/vim-windowswap' " Easily swap buffers
Plug 'bling/vim-bufferline' " plugin for buffer display in lightline/airline
Plug 'supertab' " Tab completion
Plug 'vim-pandoc/vim-pandoc-syntax' 
Plug 'vim-pandoc/vim-pandoc'
Plug 'vim-pandoc/vim-pandoc-after' " plugin for vim-pandoc and other plugins
Plug 'morhetz/gruvbox' " alternate colors
Plug 'VOoM' " outliner
Plug 'tpope/vim-commentary' " Comment manager/toggle
Plug 'tpope/vim-fugitive' " Git management
Plug 'tpope/vim-surround' "  surround text with whatever
Plug 'airblade/vim-gitgutter'
Plug 'mhinz/vim-startify' " session manager and startup screen
Plug 'junegunn/goyo.vim' " writeroom style writing
Plug 'TeX-9' " Latex
Plug 'gitv' " Git Viewer 
Plug 'henrik/vim-open-url' " open any url using ruby and regex
Plug 'vim-orgmode' " org mode for vim
Plug 'hecal3/vim-leader-guide' " key guide like emacs which key

call plug#end()
" End Plugins
"}}}
#+END_SRC

** Keymappings
#+BEGIN_SRC vimrc
" Grep TODO and NOTE
noremap <leader>d :copen<CR>:vimgrep /TODO/gj *.md *.taskpaper<CR>
noremap <leader>n :copen<CR>:vimgrep /NOTE/gj *.md *.taskpaper<CR>
" clean up paragraph according to pandoc specs
nnoremap <leader>= vip=
" previous and next buffer 
nnoremap <leader>[ :bp<CR>
nnoremap <leader>] :bn<CR>
" previous and next tab
nnoremap <leader>' :tabnext<CR>
nnoremap <leader>; :tabprevious<CR>
" remap escape
inoremap fd <Esc>

" make cursor move to next visual line below cursor this is a test 
noremap Q gwip
nnoremap <leader>c :set cursorline! <CR>
nnoremap <C-N><C-N> :set invnumber<CR>
" presents spelling options in dropdown and returns to normal mode
nnoremap <leader>s ea<C-X><C-S>

" Let's make it easy to edit this file (mnemonic for the key sequence is " 'e'dit 'v'imrc)
nnoremap <silent> ,ev :e $MYVIMRC<cr>
" And to source this file as well (mnemonic for the key sequence is " 's'ource 'v'imrc)
nnoremap <silent> ,sv :so $MYVIMRC<cr>

" set leader and local leader
let mapleader = "\<Space>"
let maplocalleader = ","
" Toggle table of contents
nnoremap <localLeader>c :TOC<CR>
" Toggle Goyo on/off
nnoremap <localLeader>g :Goyo<CR>
"Map NERDTree to ,t
nnoremap <silent> <localLeader>t :NERDTreeToggle<CR>
nnoremap <localLeader>v :VoomToggle<CR>
" Gundo toggle
nnoremap <localleader>G :GundoToggle<CR>
"toggle filetype for pandoc
nnoremap <localleader>f :set filetype=pandoc<CR> 
" toggle ranger file navigator
nnoremap <localleader>r :!ranger<CR>
inoremap <localleader>r :!ranger<CR>
" Fuzzyfinder for home directory
noremap <C-t> :FZF ~<CR>
" Fuzzyfinder for current directory
noremap <C-f> :FZF<CR>
" quick save
nnoremap <localleader>w :w!<CR>

"Copy to system clipboard
nmap <F2> :set paste<CR>:r !pbpaste<CR>:set nopaste<CR>
imap <F2> <Esc>:set paste<CR>:r !pbpaste<CR>:set nopaste<CR>
nmap <F1> :.w !pbcopy<CR><CR>
vmap <F1> :w !pbcopy<CR><CR>

" start external shell command with a bang
nnoremap ! :!

" correct common misspellings for commands
cabbrev ew :wq
cabbrev qw :wq 
cabbrev Q :q
cabbrev W :w 
#+END_SRC

** Settings
#+BEGIN_SRC vimrc
" Settings {{{
syntax enable
" buffer settings
set hidden
set switchbuf=usetab
highlight LineNr ctermfg=yellow ctermbg=black guibg=black guifg=grey
hi CursorLineNR cterm=bold
augroup CLNRSet
      autocmd! ColorScheme * hi CursorLineNR cterm=bold ctermfg=white
    augroup END
set cursorline
hi CursorLine   cterm=NONE ctermbg=darkred ctermfg=white guibg=darkred guifg=white

" automatically leave insert mode after 'updatetime' milliseconds of inaction
" au CursorHoldI * stopinsert

" set vimwiki filetype for path to wiki
" autocmd! BufRead,BufNewFile /Users/Roambot/Dropbox/Wiki set filetype=vimwiki

" include spaces in filenames
set isfname+=32

set ttyscroll=3
" change cursor shape depending on mode with different code for tmux configuration
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
  else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" split settings
set splitbelow
set splitright

" colorscheme settings
set background=dark
colorscheme gruvbox

" tab settings
hi TabLine      ctermfg=Black  ctermbg=Green     cterm=NONE
hi TabLineFill  ctermfg=Black  ctermbg=Green     cterm=NONE
hi TabLineSel   ctermfg=White  ctermbg=DarkBlue  cterm=NONE

set spell spelllang=en_us
set tabstop=4 shiftwidth=2 expandtab
set linespace=2
set scrolloff=999 " keep cursor in middle of screen
set textwidth=80
" remap paragraph formatting 
set formatprg=par
set ruler
set laststatus=2
set noshowmode
set showcmd
set wildmenu
set ttyfast " u got a fast terminal
set lazyredraw " to avoid scrolling problems
" Move to next line when using left and right
set whichwrap+=<,>
" |nojoinspaces| allows you to use SHIFT-J in normal mode to join the next line 
" with the current line without adding unwanted spaces.
setlocal nojoinspaces
set backspace=indent,eol,start
" make vim scrollable with mouse
set mouse=a
set go+=a


" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor
endif

" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>
" Ag exec command
"command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
nnoremap A :Ag<Space>

#+END_SRC

** Functions
#+BEGIN_SRC vimrc
" Functions {{{
"Reveal file in finder using :Reveal
function! s:RevealInFinder()
  if filereadable(expand("%"))
    let l:command = "open -R %"
  elseif getftype(expand("%:p:h")) == "dir"
    let l:command = "open %:p:h"
  else
    let l:command = "open ."
  endif
  execute ":silent! !" . l:command
  redraw!
endfunction
command! Reveal call <SID>RevealInFinder()

" }}}

#+END_SRC

** Startify
#+BEGIN_SRC vimrc
  " Startify Settings {{{

      " au! autocmd User Startified setlocal cursorline

      let g:startify_enable_special         = 0
      let g:startify_files_number           = 8
      let g:startify_relative_path          = 0
      let g:startify_change_to_dir          = 1
      let g:startify_session_autoload       = 1
      let g:startify_session_persistence    = 1
      let g:startify_session_delete_buffers = 1

      let g:startify_list_order = [
        \ ['   Most recently used:'],
        \ 'files',
        \ ['   Recently used within this dir:'],
        \ 'dir',
        \ ['   Sessions:'],
        \ 'sessions',
        \ ['   Bookmarks:'],
        \ 'bookmarks',
        \ ]

      let g:startify_skiplist = [
                  \ 'COMMIT_EDITMSG',
                  \ $VIMRUNTIME .'/doc',
                  \ 'bundle/.*/doc',
                  \ '\.vimgolf',
                  \ ]

      let g:startify_bookmarks = [
                  \ '~/.vimrc',
                  \ '~/Dropbox/Work/Teaching',
                  \ '~/Dropbox/Work/Projects',
                  \ ]

      let g:startify_custom_header =
            \ map(split(system('fortune | cowsay'), '\n'), '"   ". v:val') + ['','']

      let g:startify_custom_footer =
            \ ['', "Aus so krummem Holze, als woraus der Mensch gemacht ist, kann nichts ganz Gerades gezimmert werden (8:23)", '']


      hi StartifyBracket ctermfg=240
      hi StartifyFile    ctermfg=147
      hi StartifyFooter  ctermfg=240
      hi StartifyHeader  ctermfg=114
      hi StartifyNumber  ctermfg=215
      hi StartifyPath    ctermfg=245
      hi StartifySlash   ctermfg=240
      hi StartifySpecial ctermfg=240

  " }}}

#+END_SRC
** Voom Settings
#+BEGIN_SRC vimrc
" Voom Settings {{{

let g:voom_tree_width = 50
let g:voom_ft_modes = {'pandoc': 'markdown', 'markdown': 'markdown', 'tex': 'latex'}
let g:voom_default_mode = 'pandoc'

" }}}
#+END_SRC

** Airline settings
#+BEGIN_SRC vimrc
" AIRLINE SETTINGS {{{

  let g:airline_powerline_fonts=1 
  let g:airline_theme = 'gruvbox'
  " let g:airline_left_sep=''
  " let g:airline_right_sep=''
  " let g:airline_right_sep = '◀'
  " let g:airline_left_sep = '▶'
" enable/disable detection of whitespace errors. >
  let g:airline#extensions#whitespace#enabled = 0
" enable/disable tmuxline integration >
  let g:airline#extensions#tmuxline#enabled = 1
" enable/disable bufferline integration >
  let g:airline#extensions#bufferline#enabled = 0
  let g:bufferline_echo = 1
" enable buffers in tabs
  let g:airline#extensions#tabline#enabled = 1
" Tabline separators
  " let g:airline#extensions#tabline#left_sep = '|'
  " let g:airline#extensions#tabline#left_alt_sep = '|'
  " let g:airline#extensions#tabline#left_sep = '▶'
  " let g:airline#extensions#tabline#left_alt_sep = '>'
" display tab number in tab
  let g:airline#extensions#tabline#tab_nr_type = 1 " tab number
" go to tab number with <leader>number
  let g:airline#extensions#tabline#buffer_idx_mode = 1
  nmap <leader>1 <Plug>AirlineSelectTab1
  nmap <leader>2 <Plug>AirlineSelectTab2
  nmap <leader>3 <Plug>AirlineSelectTab3
  nmap <leader>4 <Plug>AirlineSelectTab4
  nmap <leader>5 <Plug>AirlineSelectTab5
  nmap <leader>6 <Plug>AirlineSelectTab6
  nmap <leader>7 <Plug>AirlineSelectTab7
  nmap <leader>8 <Plug>AirlineSelectTab8
  nmap <leader>9 <Plug>AirlineSelectTab9
" display only filename in tabs
let g:airline#extensions#tabline#fnamemod = ':t'

" display time
function! AirlineInit()
"  let g:airline_section_y = airline#section#create(['ffenc', '%{strftime("%H:%M")}'])
   let g:airline_section_y = airline#section#create(['%{strftime("%a  %b %d  %X")}'])
endfunction
autocmd VimEnter * call AirlineInit()
"""""""""""""""""""""""""""""""""""
  " let g:airline_theme = 'base16'
  " let g:airline_theme = 'solarized'
  " let g:airline_theme = 'hybridline'
  " let g:airline_theme = 'bubblegum'

" if has('gui_macvim') 
"   let g:airline_right_sep = '◀'
"   let g:airline_left_sep = '▶'
" else
"  let g:airline_powerline_fonts=1 
" endif 

" " Tweak of solarized colors
" let g:airline_theme_patch_func = 'AirLineBlaenkTheme'
" " 0,1: gfg, gbg; 2,3: tfg, tbg; 4: styles
" function! AirLineBlaenkTheme(palette)
"   if g:airline_theme == 'solarized'
"     let magenta = ['#ffffff', '#d33682', 255, 125, '']
"     let blue = ['#ffffff', '#268bd2', 255, 33, '']
"     let green = ['#ffffff', '#859900', 255, 64, '']
"     let red = ['#ffffff', '#dc322f', 255, 160, '']
"     let orange = ['#ffffff', '#cb4b16', 255, 166, '']
"     let cyan = ['#ffffff', '#2aa198', 255, 37, '']
"     let modes = {
"       \ 'normal': blue,
"       \ 'insert': cyan,
"       \ 'replace': magenta,
"       \ 'visual': orange
"       \}
"     let a:palette.replace = copy(a:palette.insert)
"     let a:palette.replace_modified = a:palette.insert_modified
"     for key in keys(modes)
"       let a:palette[key].airline_a = modes[key]
"       let a:palette[key].airline_z = modes[key]
"     endfor
"   endif
" endfunction


" symbol dictionary
" if !exists('g:airline_symbols')
"   let g:airline_symbols = {}
" endif

" " unicode symbols

"    let g:airline_left_sep = '»'
"    let g:airline_left_sep = '▶'
"    let g:airline_right_sep = '«'
"    let g:airline_right_sep = '◀'
"    let g:airline_symbols.linenr = '␊'
"    let g:airline_symbols.linenr = '␤'
"    let g:airline_symbols.linenr = '¶'
"    let g:airline_symbols.branch = '⎇'
"    let g:airline_symbols.paste = 'ρ'
"    let g:airline_symbols.paste = 'Þ'
"    let g:airline_symbols.paste = '∥'
"    let g:airline_symbols.whitespace = 'Ξ'
"

 " " powerline symbols
 "  let g:airline_left_sep = ''
 "  let g:airline_left_alt_sep = ''
 "  let g:airline_right_sep = ''
 "  let g:airline_right_alt_sep = ''
 "  let g:airline_symbols.branch = ''
 "  let g:airline_symbols.readonly = ''
 "  let g:airline_symbols.linenr = ''




" }}}


#+END_SRC


* Miscellaneous 
** Ansiweather

#+BEGIN_SRC conf :tangle ~/.ansiweatherrc
api_key:d0dfeea1f7a83406288ec55700b36f3d 
location:Providence,RI
fetch_cmd:ftp -V -o -
geo_api_url:www.telize.com/geoip
geo_api_proto:http
units:imperial
daylight:true
#+END_SRC

