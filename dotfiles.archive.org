* DISABLED MacOS Settings Config (Mavericks/Yosemite))
:PROPERTIES:
:header-args: :tangle ~/dotfiles/macos-settings.sh
:END:
#+BEGIN_SRC conf

  # OSX for Hackers (Mavericks/Yosemite)
  #
  # Source: https://gist.github.com/brandonb927/3195465

  #!/bin/sh

  # Some things taken from here
  # https://github.com/mathiasbynens/dotfiles/blob/master/.osx

  # Ask for the administrator password upfront
  sudo -v

  echo "This script will make your Mac awesome"

  ###############################################################################
  # General UI/UX
  ###############################################################################

  # echo ""
  # echo "Hide the Time Machine, Volume, User, and Bluetooth icons"
  # for domain in ~/Library/Preferences/ByHost/com.apple.systemuiserver.*; do
  #   defaults write "${domain}" dontAutoLoad -array \
  #     "/System/Library/CoreServices/Menu Extras/TimeMachine.menu" \
  #     "/System/Library/CoreServices/Menu Extras/Volume.menu" \
  #     "/System/Library/CoreServices/Menu Extras/User.menu"
  # done
  # defaults write com.apple.systemuiserver menuExtras -array \
  #   "/System/Library/CoreServices/Menu Extras/Bluetooth.menu" \
  #   "/System/Library/CoreServices/Menu Extras/AirPort.menu" \
  #   "/System/Library/CoreServices/Menu Extras/Battery.menu" \
  #   "/System/Library/CoreServices/Menu Extras/Clock.menu"

  # sudo chmod 600 /System/Library/CoreServices/Search.bundle/Contents/MacOS/Search

  echo ""
  echo "Disabling OS X Gate Keeper"
  echo "(You'll be able to install any app you want from here on, not just Mac App Store apps)"
  sudo spctl --master-disable
  sudo defaults write /var/db/SystemPolicy-prefs.plist enabled -string no
  defaults write com.apple.LaunchServices LSQuarantine -bool false

  echo ""
  echo "Increasing the window resize speed for Cocoa applications"
  defaults write NSGlobalDomain NSWindowResizeTime -float 0.001

  echo ""
  echo "Expanding the save panel by default"
  defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true
  defaults write NSGlobalDomain PMPrintingExpandedStateForPrint -bool true
  defaults write NSGlobalDomain PMPrintingExpandedStateForPrint2 -bool true

  echo ""
  echo "Automatically quit printer app once the print jobs complete"
  defaults write com.apple.print.PrintingPrefs "Quit When Finished" -bool true

  # Try e.g. `cd /tmp; unidecode "\x{0000}" > cc.txt; open -e cc.txt`
  # echo ""
  # echo "Displaying ASCII control characters using caret notation in standard text views"
  # defaults write NSGlobalDomain NSTextShowsControlCharacters -bool true

  # echo ""
  # echo "Disabling system-wide resume"
  # defaults write NSGlobalDomain NSQuitAlwaysKeepsWindows -bool false

  # echo ""
  # echo "Disabling automatic termination of inactive apps"
  # defaults write NSGlobalDomain NSDisableAutomaticTermination -bool true

  echo ""
  echo "Saving to disk (not to iCloud) by default"
  defaults write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool false

  echo ""
  echo "Reveal IP address, hostname, OS version, etc. when clicking the clock in the login window"
  sudo defaults write /Library/Preferences/com.apple.loginwindow AdminHostInfo HostName

  # echo ""
  # echo "Never go into computer sleep mode"
  # systemsetup -setcomputersleep Off > /dev/null

  echo ""
  echo "Check for software updates daily, not just once per week"
  defaults write com.apple.SoftwareUpdate ScheduleFrequency -int 1

  echo ""
  echo "Disable smart quotes and smart dashes as theyÃ¢â‚¬â„¢re annoying when typing code"
  defaults write NSGlobalDomain NSAutomaticQuoteSubstitutionEnabled -bool false
  defaults write NSGlobalDomain NSAutomaticDashSubstitutionEnabled -bool false


  ###############################################################################
  # Trackpad, mouse, keyboard, Bluetooth accessories, and input
  ###############################################################################

  echo ""
  echo "Increasing sound quality for Bluetooth headphones/headsets"
  defaults write com.apple.BluetoothAudioAgent "Apple Bitpool Min (editable)" -int 40

  echo ""
  echo "Enabling full keyboard access for all controls (e.g. enable Tab in modal dialogs)"
  defaults write NSGlobalDomain AppleKeyboardUIMode -int 3

  echo ""
  echo "Disabling press-and-hold for keys in favor of a key repeat"
  defaults write NSGlobalDomain ApplePressAndHoldEnabled -bool false

  echo ""
  echo "Setting a blazingly fast keyboard repeat rate (ain't nobody got time fo special chars while coding!)"
  defaults write NSGlobalDomain KeyRepeat -int 0

  # echo ""
  # echo "Disabling auto-correct"
  # defaults write NSGlobalDomain NSAutomaticSpellingCorrectionEnabled -bool false

  echo ""
  echo "Setting trackpad & mouse speed to a reasonable number"
  defaults write -g com.apple.trackpad.scaling 2
  defaults write -g com.apple.mouse.scaling 2.5

  echo ""
  echo " Trackpad: enable tap to click for this user and for the login screen"
  defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true
  defaults -currentHost write NSGlobalDomain com.apple.mouse.tapBehavior -int 1
  defaults write NSGlobalDomain com.apple.mouse.tapBehavior -int 1

  echo ""
  echo " Automatically illuminate built-in MacBook keyboard in low light"
  defaults write com.apple.BezelServices kDim -bool true

  echo ""
  echo "Turn off keyboard illumination when computer is not used for 5 minutes"
  defaults write com.apple.BezelServices kDimTime -int 300

  ###############################################################################
  # Screen
  ###############################################################################

  echo ""
  echo "Requiring password immediately after sleep or screen saver begins"
  defaults write com.apple.screensaver askForPassword -int 1
  defaults write com.apple.screensaver askForPasswordDelay -int 0

  # echo ""
  # echo "Enabling subpixel font rendering on non-Apple LCDs"
  # defaults write NSGlobalDomain AppleFontSmoothing -int 2

  # echo ""
  # echo "Enable HiDPI display modes (requires restart)"
  # sudo defaults write /Library/Preferences/com.apple.windowserver DisplayResolutionEnabled -bool true

  ###############################################################################
  # Finder
  ###############################################################################

  echo ""
  echo "Showing icons for hard drives, servers, and removable media on the desktop"
  defaults write com.apple.finder ShowExternalHardDrivesOnDesktop -bool true

  echo ""
  echo "Showing all filename extensions in Finder by default"
  defaults write NSGlobalDomain AppleShowAllExtensions -bool true

  echo ""
  echo "Showing status bar in Finder by default"
  defaults write com.apple.finder ShowStatusBar -bool true

  echo ""
  echo "Allowing text selection in Quick Look/Preview in Finder by default"
  defaults write com.apple.finder QLEnableTextSelection -bool true

  echo ""
  echo "Displaying full POSIX path as Finder window title"
  defaults write com.apple.finder _FXShowPosixPathInTitle -bool true

  echo ""
  echo "Disabling the warning when changing a file extension"
  defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false

  echo ""
  echo "Use column view in all Finder windows by default"
  defaults write com.apple.finder FXPreferredViewStyle Clmv

  echo ""
  echo "Avoiding the creation of .DS_Store files on network volumes"
  defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true

  echo ""
  echo " Empty Trash securely by default"
  defaults write com.apple.finder EmptyTrashSecurely -bool true

  echo ""
  echo " Hot corners"
  # Possible values:
  #  0: no-op
  #  2: Mission Control
  #  3: Show application windows
  #  4: Desktop
  #  5: Start screen saver
  #  6: Disable screen saver
  #  7: Dashboard
  # 10: Put display to sleep
  # 11: Launchpad
  echo "Top left screen corner → Screen Saver"
  defaults write com.apple.dock wvous-tl-corner -int 5
  defaults write com.apple.dock wvous-tl-modifier -int 0
  echo "Top right screen corner → Desktop"
  defaults write com.apple.dock wvous-tr-corner -int 4
  defaults write com.apple.dock wvous-tr-modifier -int 0
  echo " Bottom right screen corner → Sleep display"
  defaults write com.apple.dock wvous-br-corner -int 10
  defaults write com.apple.dock wvous-br-modifier -int 0
  echo " Bottom left screen corner → Show app windows"
  defaults write com.apple.dock wvous-br-corner -int 3
  defaults write com.apple.dock wvous-br-modifier -int 0

  # echo ""
  # echo "Disabling disk image verification"
  # defaults write com.apple.frameworks.diskimages skip-verify -bool true
  # defaults write com.apple.frameworks.diskimages skip-verify-locked -bool true
  # defaults write com.apple.frameworks.diskimages skip-verify-remote -bool true

  echo ""
  echo "Enabling snap-to-grid for icons on the desktop and in other icon views"
  /usr/libexec/PlistBuddy -c "Set :DesktopViewSettings:IconViewSettings:arrangeBy grid" ~/Library/Preferences/com.apple.finder.plist
  /usr/libexec/PlistBuddy -c "Set :FK_StandardViewSettings:IconViewSettings:arrangeBy grid" ~/Library/Preferences/com.apple.finder.plist
  /usr/libexec/PlistBuddy -c "Set :StandardViewSettings:IconViewSettings:arrangeBy grid" ~/Library/Preferences/com.apple.finder.plist


  ###############################################################################
  # Dock & Mission Control
  ###############################################################################

  # Wipe all (default) app icons from the Dock
  # This is only really useful when setting up a new Mac, or if you donÃ¢â‚¬â„¢t use
  # the Dock to launch apps.
  #defaults write com.apple.dock persistent-apps -array

  echo ""
  echo "Setting the icon size of Dock items to 36 pixels for optimal size/screen-realestate"
  defaults write com.apple.dock tilesize -int 36

  echo ""
  echo "Speeding up Mission Control animations and grouping windows by application"
  defaults write com.apple.dock expose-animation-duration -float 0.1
  defaults write com.apple.dock "expose-group-by-app" -bool true

  echo ""
  echo "Setting Dock to auto-hide and removing the auto-hiding delay"
  defaults write com.apple.dock autohide -bool true
  defaults write com.apple.dock autohide-delay -float 0
  defaults write com.apple.dock autohide-time-modifier -float 0


  ###############################################################################
  # Safari & WebKit
  ###############################################################################

  echo ""
  echo "Hiding SafariÃ¢â‚¬â„¢s bookmarks bar by default"
  defaults write com.apple.Safari ShowFavoritesBar -bool false

  echo ""
  echo "Hiding SafariÃ¢â‚¬â„¢s sidebar in Top Sites"
  defaults write com.apple.Safari ShowSidebarInTopSites -bool false

  echo ""
  echo "Disabling SafariÃ¢â‚¬â„¢s thumbnail cache for History and Top Sites"
  defaults write com.apple.Safari DebugSnapshotsUpdatePolicy -int 2

  echo ""
  echo "Enabling SafariÃ¢â‚¬â„¢s debug menu"
  defaults write com.apple.Safari IncludeInternalDebugMenu -bool true

  echo ""
  echo "Making SafariÃ¢â‚¬â„¢s search banners default to Contains instead of Starts With"
  defaults write com.apple.Safari FindOnPageMatchesWordStartsOnly -bool false

  echo ""
  echo "Removing useless icons from SafariÃ¢â‚¬â„¢s bookmarks bar"
  defaults write com.apple.Safari ProxiesInBookmarksBar "()"

  echo ""
  echo "Allow hitting the Backspace key to go to the previous page in history"
  defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2BackspaceKeyNavigationEnabled -bool true

  echo ""
  echo "Enabling the Develop menu and the Web Inspector in Safari"
  defaults write com.apple.Safari IncludeDevelopMenu -bool true
  defaults write com.apple.Safari WebKitDeveloperExtrasEnabledPreferenceKey -bool true
  defaults write com.apple.Safari "com.apple.Safari.ContentPageGroupIdentifier.WebKit2DeveloperExtrasEnabled" -bool true

  echo ""
  echo "Adding a context menu item for showing the Web Inspector in web views"
  defaults write NSGlobalDomain WebKitDeveloperExtras -bool true


  ###############################################################################
  # Mail
  ###############################################################################

  echo ""
  echo "Setting email addresses to copy as 'foo@example.com' instead of 'Foo Bar <foo@example.com>' in Mail.app"
  defaults write com.apple.mail AddressesIncludeNameOnPasteboard -bool false


  ###############################################################################
  # Terminal
  ###############################################################################

  echo ""
  echo "Enabling UTF-8 ONLY in Terminal.app and setting the Pro theme by default"
  defaults write com.apple.terminal StringEncodings -array 4
  defaults write com.apple.Terminal "Default Window Settings" -string "Pro"
  defaults write com.apple.Terminal "Startup Window Settings" -string "Pro"


  ###############################################################################
  # Time Machine
  ###############################################################################

  echo ""
  echo "Preventing Time Machine from prompting to use new hard drives as backup volume"
  defaults write com.apple.TimeMachine DoNotOfferNewDisksForBackup -bool true

  echo ""
  echo "Disabling local Time Machine backups"
  hash tmutil &> /dev/null && sudo tmutil disablelocal


  ###############################################################################
  # Messages                                                                    #
  ###############################################################################

  echo ""
  echo "Disable automatic emoji substitution (i.e. use plain text smileys)"
  defaults write com.apple.messageshelper.MessageController SOInputLineSettings -dict-add "automaticEmojiSubstitutionEnablediMessage" -bool false

  # echo ""
  # echo "Disable smart quotes as itÃ¢â‚¬â„¢s annoying for messages that contain code"
  # defaults write com.apple.messageshelper.MessageController SOInputLineSettings -dict-add "automaticQuoteSubstitutionEnabled" -bool false

  # echo ""
  # echo "Disable continuous spell checking"
  # defaults write com.apple.messageshelper.MessageController SOInputLineSettings -dict-add "continuousSpellCheckingEnabled" -bool false

  ###############################################################################
  # Personal Additions
  ###############################################################################

  # echo ""
  # echo "Disable hibernation (speeds up entering sleep mode)"
  # sudo pmset -a hibernatemode 0

  # echo ""
  # echo "Remove the sleep image file to save disk space"
  # sudo rm /Private/var/vm/sleepimage
  # echo "Creating a zero-byte file insteadÃ¢â‚¬Â¦"
  # sudo touch /Private/var/vm/sleepimage
  # echo "Ã¢â‚¬Â¦and make sure it canÃ¢â‚¬â„¢t be rewritten"
  # sudo chflags uchg /Private/var/vm/sleepimage

  # echo ""
  # echo "Disable the sudden motion sensor as itÃ¢â‚¬â„¢s not useful for SSDs"
  # sudo pmset -a sms 0

  echo ""
  echo "Speeding up wake from sleep to 24 hours from an hour"
  # http://www.cultofmac.com/221392/quick-hack-speeds-up-retina-macbooks-wake-from-sleep-os-x-tips/
  sudo pmset -a standbydelay 86400

  # echo ""
  # echo "Disable computer sleep and stop the display from shutting off"
  # sudo pmset -a sleep 0
  # sudo pmset -a displaysleep 0

  # echo ""
  # echo "Disable annoying backswipe in Chrome"
  # defaults write com.google.Chrome AppleEnableSwipeNavigateWithScrolls -bool false

  echo ""
  echo "Always boot in verbose mode"
  sudo nvram boot-args="-v"

  ###############################################################################
  # Kill affected applications
  ###############################################################################

  echo "Done!"

#+END_SRC

* DISABLED ZSH
** DISABLED Sourcing
For syntax highlighting in zsh
#+BEGIN_SRC conf :tangle no
  zgen load zsh-users/zsh-syntax-highlighting
  # source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
#+END_SRC


** DISABLED Zgen config 
I used to use [[https://github.com/tarjoilija/zgen][zgen]] for my zsh plugins.

#+BEGIN_SRC conf :tangle no
  #### ZGEN PLUGINS #######

  # load zgen
   source "${HOME}/.zgen/zgen.zsh"

  # Completion path
  # fpath=(~/.zsh/Completion $fpath)

  # check if there's no init script
   if ! zgen saved; then
       echo "Creating a zgen save"

     # prezto and modules
     #  zgen prezto prompt theme 'garrett'

       zgen prezto
       zgen prezto homebrew
       zgen prezto git
       zgen prezto command-not-found
       zgen prezto utility
       zgen prezto directory
       # zgen prezto syntax-highlighting

       zgen load tarruda/zsh-autosuggestions

  # save all to init script
     zgen save
   fi
   ## END ZGEN ################################
#+END_SRC


** DISABLED Vi Mode
#+BEGIN_SRC conf :tangle no
  # Set vi mode
  bindkey -v
  bindkey -M viins 'jk' vi-cmd-mode
  bindkey '^R' history-incremental-search-backward
#+END_SRC


* DISABLED Vim
:PROPERTIES:
:header-args: :tangle no
:END:

I use emacs, but it is nice to have a decently configured vim when
necessary. Right now I have this disabled in favor of spacevim.

** Header Info
#+BEGIN_SRC vimrc 

" vim:fdm=marker
set encoding=utf-8
scriptencoding utf-8
set nocompatible
filetype plugin indent on

#+END_SRC

** Plugins
#+BEGIN_SRC vimrc
" Plugins {{{

call plug#begin('~/.vim/plugged')

Plug 'bling/vim-airline'  " powerline plugin
Plug 'mkitt/tabline.vim'  " configure tabs and works with airline
Plug 'git://github.com/sjl/gundo.vim' " graphical tree undo
" NERD tree will be loaded on the first invocation of NERDTreeToggle command
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' } " file manager
Plug 'jeetsukumaran/vim-buffergator' "Buffer manager
Plug 'wesQ3/vim-windowswap' " Easily swap buffers
Plug 'bling/vim-bufferline' " plugin for buffer display in lightline/airline
Plug 'supertab' " Tab completion
Plug 'vim-pandoc/vim-pandoc-syntax' 
Plug 'vim-pandoc/vim-pandoc'
Plug 'vim-pandoc/vim-pandoc-after' " plugin for vim-pandoc and other plugins
Plug 'morhetz/gruvbox' " alternate colors
Plug 'VOoM' " outliner
Plug 'tpope/vim-commentary' " Comment manager/toggle
Plug 'tpope/vim-fugitive' " Git management
Plug 'tpope/vim-surround' "  surround text with whatever
Plug 'airblade/vim-gitgutter'
Plug 'mhinz/vim-startify' " session manager and startup screen
Plug 'junegunn/goyo.vim' " writeroom style writing
Plug 'TeX-9' " Latex
Plug 'gitv' " Git Viewer 
Plug 'henrik/vim-open-url' " open any url using ruby and regex
Plug 'vim-orgmode' " org mode for vim
Plug 'hecal3/vim-leader-guide' " key guide like emacs which key

call plug#end()
" End Plugins
"}}}
#+END_SRC

** Keymappings
#+BEGIN_SRC vimrc
" Grep TODO and NOTE
noremap <leader>d :copen<CR>:vimgrep /TODO/gj *.md *.taskpaper<CR>
noremap <leader>n :copen<CR>:vimgrep /NOTE/gj *.md *.taskpaper<CR>
" clean up paragraph according to pandoc specs
nnoremap <leader>= vip=
" previous and next buffer 
nnoremap <leader>[ :bp<CR>
nnoremap <leader>] :bn<CR>
" previous and next tab
nnoremap <leader>' :tabnext<CR>
nnoremap <leader>; :tabprevious<CR>
" remap escape
inoremap fd <Esc>

" make cursor move to next visual line below cursor this is a test 
noremap Q gwip
nnoremap <leader>c :set cursorline! <CR>
nnoremap <C-N><C-N> :set invnumber<CR>
" presents spelling options in dropdown and returns to normal mode
nnoremap <leader>s ea<C-X><C-S>

" Let's make it easy to edit this file (mnemonic for the key sequence is " 'e'dit 'v'imrc)
nnoremap <silent> ,ev :e $MYVIMRC<cr>
" And to source this file as well (mnemonic for the key sequence is " 's'ource 'v'imrc)
nnoremap <silent> ,sv :so $MYVIMRC<cr>

" set leader and local leader
let mapleader = "\<Space>"
let maplocalleader = ","
" Toggle table of contents
nnoremap <localLeader>c :TOC<CR>
" Toggle Goyo on/off
nnoremap <localLeader>g :Goyo<CR>
"Map NERDTree to ,t
nnoremap <silent> <localLeader>t :NERDTreeToggle<CR>
nnoremap <localLeader>v :VoomToggle<CR>
" Gundo toggle
nnoremap <localleader>G :GundoToggle<CR>
"toggle filetype for pandoc
nnoremap <localleader>f :set filetype=pandoc<CR> 
" toggle ranger file navigator
nnoremap <localleader>r :!ranger<CR>
inoremap <localleader>r :!ranger<CR>
" Fuzzyfinder for home directory
noremap <C-t> :FZF ~<CR>
" Fuzzyfinder for current directory
noremap <C-f> :FZF<CR>
" quick save
nnoremap <localleader>w :w!<CR>

"Copy to system clipboard
nmap <F2> :set paste<CR>:r !pbpaste<CR>:set nopaste<CR>
imap <F2> <Esc>:set paste<CR>:r !pbpaste<CR>:set nopaste<CR>
nmap <F1> :.w !pbcopy<CR><CR>
vmap <F1> :w !pbcopy<CR><CR>

" start external shell command with a bang
nnoremap ! :!

" correct common misspellings for commands
cabbrev ew :wq
cabbrev qw :wq 
cabbrev Q :q
cabbrev W :w 
#+END_SRC

** Settings
#+BEGIN_SRC vimrc
" Settings {{{
syntax enable
" buffer settings
set hidden
set switchbuf=usetab
highlight LineNr ctermfg=yellow ctermbg=black guibg=black guifg=grey
hi CursorLineNR cterm=bold
augroup CLNRSet
      autocmd! ColorScheme * hi CursorLineNR cterm=bold ctermfg=white
    augroup END
set cursorline
hi CursorLine   cterm=NONE ctermbg=darkred ctermfg=white guibg=darkred guifg=white

" automatically leave insert mode after 'updatetime' milliseconds of inaction
" au CursorHoldI * stopinsert

" set vimwiki filetype for path to wiki
" autocmd! BufRead,BufNewFile /Users/Roambot/Dropbox/Wiki set filetype=vimwiki

" include spaces in filenames
set isfname+=32

set ttyscroll=3
" change cursor shape depending on mode with different code for tmux configuration
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
  else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" split settings
set splitbelow
set splitright

" colorscheme settings
set background=dark
colorscheme gruvbox

" tab settings
hi TabLine      ctermfg=Black  ctermbg=Green     cterm=NONE
hi TabLineFill  ctermfg=Black  ctermbg=Green     cterm=NONE
hi TabLineSel   ctermfg=White  ctermbg=DarkBlue  cterm=NONE

set spell spelllang=en_us
set tabstop=4 shiftwidth=2 expandtab
set linespace=2
set scrolloff=999 " keep cursor in middle of screen
set textwidth=80
" remap paragraph formatting 
set formatprg=par
set ruler
set laststatus=2
set noshowmode
set showcmd
set wildmenu
set ttyfast " u got a fast terminal
set lazyredraw " to avoid scrolling problems
" Move to next line when using left and right
set whichwrap+=<,>
" |nojoinspaces| allows you to use SHIFT-J in normal mode to join the next line 
" with the current line without adding unwanted spaces.
setlocal nojoinspaces
set backspace=indent,eol,start
" make vim scrollable with mouse
set mouse=a
set go+=a


" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor
endif

" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>
" Ag exec command
"command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
nnoremap A :Ag<Space>

#+END_SRC

** Functions
#+BEGIN_SRC vimrc
" Functions {{{
"Reveal file in finder using :Reveal
function! s:RevealInFinder()
  if filereadable(expand("%"))
    let l:command = "open -R %"
  elseif getftype(expand("%:p:h")) == "dir"
    let l:command = "open %:p:h"
  else
    let l:command = "open ."
  endif
  execute ":silent! !" . l:command
  redraw!
endfunction
command! Reveal call <SID>RevealInFinder()

" }}}

#+END_SRC

** Startify
#+BEGIN_SRC vimrc
  " Startify Settings {{{

      " au! autocmd User Startified setlocal cursorline

      let g:startify_enable_special         = 0
      let g:startify_files_number           = 8
      let g:startify_relative_path          = 0
      let g:startify_change_to_dir          = 1
      let g:startify_session_autoload       = 1
      let g:startify_session_persistence    = 1
      let g:startify_session_delete_buffers = 1

      let g:startify_list_order = [
        \ ['   Most recently used:'],
        \ 'files',
        \ ['   Recently used within this dir:'],
        \ 'dir',
        \ ['   Sessions:'],
        \ 'sessions',
        \ ['   Bookmarks:'],
        \ 'bookmarks',
        \ ]

      let g:startify_skiplist = [
                  \ 'COMMIT_EDITMSG',
                  \ $VIMRUNTIME .'/doc',
                  \ 'bundle/.*/doc',
                  \ '\.vimgolf',
                  \ ]

      let g:startify_bookmarks = [
                  \ '~/.vimrc',
                  \ '~/Dropbox/Work/Teaching',
                  \ '~/Dropbox/Work/Projects',
                  \ ]

      let g:startify_custom_header =
            \ map(split(system('fortune | cowsay'), '\n'), '"   ". v:val') + ['','']

      let g:startify_custom_footer =
            \ ['', "Aus so krummem Holze, als woraus der Mensch gemacht ist, kann nichts ganz Gerades gezimmert werden (8:23)", '']


      hi StartifyBracket ctermfg=240
      hi StartifyFile    ctermfg=147
      hi StartifyFooter  ctermfg=240
      hi StartifyHeader  ctermfg=114
      hi StartifyNumber  ctermfg=215
      hi StartifyPath    ctermfg=245
      hi StartifySlash   ctermfg=240
      hi StartifySpecial ctermfg=240

  " }}}

#+END_SRC
** Voom Settings
#+BEGIN_SRC vimrc
" Voom Settings {{{

let g:voom_tree_width = 50
let g:voom_ft_modes = {'pandoc': 'markdown', 'markdown': 'markdown', 'tex': 'latex'}
let g:voom_default_mode = 'pandoc'

" }}}
#+END_SRC

** Airline settings
#+BEGIN_SRC vimrc
" AIRLINE SETTINGS {{{

  let g:airline_powerline_fonts=1 
  let g:airline_theme = 'gruvbox'
  " let g:airline_left_sep=''
  " let g:airline_right_sep=''
  " let g:airline_right_sep = '◀'
  " let g:airline_left_sep = '▶'
" enable/disable detection of whitespace errors. >
  let g:airline#extensions#whitespace#enabled = 0
" enable/disable tmuxline integration >
  let g:airline#extensions#tmuxline#enabled = 1
" enable/disable bufferline integration >
  let g:airline#extensions#bufferline#enabled = 0
  let g:bufferline_echo = 1
" enable buffers in tabs
  let g:airline#extensions#tabline#enabled = 1
" Tabline separators
  " let g:airline#extensions#tabline#left_sep = '|'
  " let g:airline#extensions#tabline#left_alt_sep = '|'
  " let g:airline#extensions#tabline#left_sep = '▶'
  " let g:airline#extensions#tabline#left_alt_sep = '>'
" display tab number in tab
  let g:airline#extensions#tabline#tab_nr_type = 1 " tab number
" go to tab number with <leader>number
  let g:airline#extensions#tabline#buffer_idx_mode = 1
  nmap <leader>1 <Plug>AirlineSelectTab1
  nmap <leader>2 <Plug>AirlineSelectTab2
  nmap <leader>3 <Plug>AirlineSelectTab3
  nmap <leader>4 <Plug>AirlineSelectTab4
  nmap <leader>5 <Plug>AirlineSelectTab5
  nmap <leader>6 <Plug>AirlineSelectTab6
  nmap <leader>7 <Plug>AirlineSelectTab7
  nmap <leader>8 <Plug>AirlineSelectTab8
  nmap <leader>9 <Plug>AirlineSelectTab9
" display only filename in tabs
let g:airline#extensions#tabline#fnamemod = ':t'

" display time
function! AirlineInit()
"  let g:airline_section_y = airline#section#create(['ffenc', '%{strftime("%H:%M")}'])
   let g:airline_section_y = airline#section#create(['%{strftime("%a  %b %d  %X")}'])
endfunction
autocmd VimEnter * call AirlineInit()
"""""""""""""""""""""""""""""""""""
  " let g:airline_theme = 'base16'
  " let g:airline_theme = 'solarized'
  " let g:airline_theme = 'hybridline'
  " let g:airline_theme = 'bubblegum'

" if has('gui_macvim') 
"   let g:airline_right_sep = '◀'
"   let g:airline_left_sep = '▶'
" else
"  let g:airline_powerline_fonts=1 
" endif 

" " Tweak of solarized colors
" let g:airline_theme_patch_func = 'AirLineBlaenkTheme'
" " 0,1: gfg, gbg; 2,3: tfg, tbg; 4: styles
" function! AirLineBlaenkTheme(palette)
"   if g:airline_theme == 'solarized'
"     let magenta = ['#ffffff', '#d33682', 255, 125, '']
"     let blue = ['#ffffff', '#268bd2', 255, 33, '']
"     let green = ['#ffffff', '#859900', 255, 64, '']
"     let red = ['#ffffff', '#dc322f', 255, 160, '']
"     let orange = ['#ffffff', '#cb4b16', 255, 166, '']
"     let cyan = ['#ffffff', '#2aa198', 255, 37, '']
"     let modes = {
"       \ 'normal': blue,
"       \ 'insert': cyan,
"       \ 'replace': magenta,
"       \ 'visual': orange
"       \}
"     let a:palette.replace = copy(a:palette.insert)
"     let a:palette.replace_modified = a:palette.insert_modified
"     for key in keys(modes)
"       let a:palette[key].airline_a = modes[key]
"       let a:palette[key].airline_z = modes[key]
"     endfor
"   endif
" endfunction


" symbol dictionary
" if !exists('g:airline_symbols')
"   let g:airline_symbols = {}
" endif

" " unicode symbols

"    let g:airline_left_sep = '»'
"    let g:airline_left_sep = '▶'
"    let g:airline_right_sep = '«'
"    let g:airline_right_sep = '◀'
"    let g:airline_symbols.linenr = '␊'
"    let g:airline_symbols.linenr = '␤'
"    let g:airline_symbols.linenr = '¶'
"    let g:airline_symbols.branch = '⎇'
"    let g:airline_symbols.paste = 'ρ'
"    let g:airline_symbols.paste = 'Þ'
"    let g:airline_symbols.paste = '∥'
"    let g:airline_symbols.whitespace = 'Ξ'
"

 " " powerline symbols
 "  let g:airline_left_sep = ''
 "  let g:airline_left_alt_sep = ''
 "  let g:airline_right_sep = ''
 "  let g:airline_right_alt_sep = ''
 "  let g:airline_symbols.branch = ''
 "  let g:airline_symbols.readonly = ''
 "  let g:airline_symbols.linenr = ''




" }}}


#+END_SRC


* Miscellaneous 
** Ansiweather

#+BEGIN_SRC conf :tangle ~/.ansiweatherrc
api_key:d0dfeea1f7a83406288ec55700b36f3d 
location:Providence,RI
fetch_cmd:ftp -V -o -
geo_api_url:www.telize.com/geoip
geo_api_proto:http
units:imperial
daylight:true
#+END_SRC

